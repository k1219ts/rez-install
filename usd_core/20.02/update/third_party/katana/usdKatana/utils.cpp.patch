--- utils.cpp	2020-01-25 04:25:02.000000000 +0900
+++ utils_new.cpp	2020-05-06 16:49:33.769160571 +0900
@@ -116,7 +116,7 @@
 
 FnKat::Attribute
 PxrUsdKatanaUtils::ConvertVtValueToKatAttr(
-        const VtValue & val, 
+        const VtValue & val,
         bool asShaderParam)
 {
     if (val.IsHolding<bool>()) {
@@ -139,7 +139,7 @@
             return FnKat::StringAttribute(val.UncheckedGet<std::string>());
         }
     }
-    if (val.IsHolding<SdfAssetPath>()) {
+    if (val.IsHolding<SdfAssetPath>() && !asShaderParam) {  // not work for shader
         const SdfAssetPath& assetPath(val.UncheckedGet<SdfAssetPath>());
         return FnKat::StringAttribute(_ResolveAssetPath(assetPath));
     }
@@ -314,14 +314,14 @@
     // VtArray<GfVec4d>
     else if (val.IsHolding<VtArray<GfVec4d> >()) {
         const VtArray<GfVec4d> array = val.UncheckedGet<VtArray<GfVec4d> >();
-	valueAttr = VtKatanaMapOrCopy(array);    
+	valueAttr = VtKatanaMapOrCopy(array);
         // NOTE: needs typeAttr set?
     }
 
     // VtArray<GfVec3d>
     else if (val.IsHolding<VtArray<GfVec3d> >()) {
         const VtArray<GfVec3d> array = val.UncheckedGet<VtArray<GfVec3d> >();
-        valueAttr = VtKatanaMapOrCopy(array);    
+        valueAttr = VtKatanaMapOrCopy(array);
         // NOTE: needs typeAttr set?
     }
 
@@ -341,7 +341,7 @@
         typeAttr = FnKat::StringAttribute(
             TfStringPrintf("string [%zu]", array.size()));
     }
-     
+
     // If being used as a shader param, the type will be provided elsewhere,
     // so simply return the value attribute as-is.
     if (asShaderParam) {
@@ -362,7 +362,7 @@
 
 FnKat::Attribute
 PxrUsdKatanaUtils::ConvertRelTargetsToKatAttr(
-        const UsdRelationship &rel, 
+        const UsdRelationship &rel,
         bool asShaderParam)
 {
     SdfPathVector targets;
@@ -370,7 +370,7 @@
     FnKat::Attribute valueAttr;
     std::vector<std::string> vec;
     TF_FOR_ALL(targetItr, targets) {
-        UsdPrim targetPrim = 
+        UsdPrim targetPrim =
             rel.GetPrim().GetStage()->GetPrimAtPath(*targetItr);
         if (targetPrim) {
             if (targetPrim.IsA<UsdShadeShader>()){
@@ -380,9 +380,9 @@
             else {
                 vec.push_back(targetItr->GetString());
             }
-        } 
+        }
         else if (targetItr->IsPropertyPath()) {
-            if (UsdPrim owningPrim = 
+            if (UsdPrim owningPrim =
                 rel.GetPrim().GetStage()->GetPrimAtPath(
                     targetItr->GetPrimPath())) {
                 const TfTokenVector &propNames = owningPrim.GetPropertyNames();
@@ -408,9 +408,9 @@
     // Otherwise, return the type & value in a group.
     FnKat::Attribute typeAttr = FnKat::StringAttribute(
         TfStringPrintf("string [%zu]", targets.size()));
-    
+
     if (typeAttr.isValid() && valueAttr.isValid()) {
-        FnKat::GroupBuilder groupBuilder;        
+        FnKat::GroupBuilder groupBuilder;
         groupBuilder.set("type", typeAttr);
         groupBuilder.set("value", valueAttr);
         return groupBuilder.build();
@@ -423,7 +423,7 @@
 static bool
 _KTypeAndSizeFromUsdVec2(TfToken const &roleName,
                          const char *typeStr,
-                         FnKat::Attribute *inputTypeAttr, 
+                         FnKat::Attribute *inputTypeAttr,
                          FnKat::Attribute *elementSizeAttr)
 {
     if (roleName == SdfValueRoleNames->Point) {
@@ -445,7 +445,7 @@
 static bool
 _KTypeAndSizeFromUsdVec3(TfToken const &roleName,
                          const char *typeStr,
-                         FnKat::Attribute *inputTypeAttr, 
+                         FnKat::Attribute *inputTypeAttr,
                          FnKat::Attribute *elementSizeAttr)
 {
     if (roleName == SdfValueRoleNames->Point) {
@@ -458,7 +458,7 @@
         *inputTypeAttr = FnKat::StringAttribute("color3");
     } else if (roleName.IsEmpty()) {
         // Deserves explanation: there is no type in prman
-        // (or apparently, katana) that represents 
+        // (or apparently, katana) that represents
         // "a 3-vector with no additional behavior/meaning.
         // P-refs fall into this category.  In our pipeline,
         // we have chosen to represent this as float[3] to
@@ -474,7 +474,7 @@
 static bool
 _KTypeAndSizeFromUsdVec4(TfToken const &roleName,
                          const char *typeStr,
-                         FnKat::Attribute *inputTypeAttr, 
+                         FnKat::Attribute *inputTypeAttr,
                          FnKat::Attribute *elementSizeAttr)
 {
     if (roleName == SdfValueRoleNames->Point) {
@@ -498,12 +498,12 @@
 
 static bool
 _KTypeAndSizeFromUsdVec2(TfToken const &roleName,
-                         FnKat::Attribute *inputTypeAttr, 
+                         FnKat::Attribute *inputTypeAttr,
                          FnKat::Attribute *elementSizeAttr)
 {
     if (roleName.IsEmpty()) {
         // Deserves explanation: there is no type in prman
-        // (or apparently, katana) that represents 
+        // (or apparently, katana) that represents
         // "a 2-vector with no additional behavior/meaning.
         // UVs fall into this category.  In our pipeline,
         // we have chosen to represent this as float[2] to
@@ -582,7 +582,7 @@
         if (_KTypeAndSizeFromUsdVec2(roleName, "double",
                                      inputTypeAttr, elementSizeAttr)){
             const GfVec2d rawVal = val.Get<GfVec2d>();
-            *valueAttr = VtKatanaCopy(rawVal); 
+            *valueAttr = VtKatanaCopy(rawVal);
         }
         return;
     }
@@ -590,7 +590,7 @@
         if (_KTypeAndSizeFromUsdVec3(roleName, "float",
                                      inputTypeAttr, elementSizeAttr)){
             const GfVec3f rawVal = val.Get<GfVec3f>();
-            *valueAttr = VtKatanaCopy(rawVal); 
+            *valueAttr = VtKatanaCopy(rawVal);
         }
         return;
     }
@@ -598,14 +598,14 @@
         if (_KTypeAndSizeFromUsdVec4(roleName, "float",
                                      inputTypeAttr, elementSizeAttr)){
             const GfVec4f rawVal = val.Get<GfVec4f>();
-            *valueAttr = VtKatanaCopy(rawVal); 
+            *valueAttr = VtKatanaCopy(rawVal);
         }
         return;
     }
     if (val.IsHolding<GfVec2f>()) {
         if (_KTypeAndSizeFromUsdVec2(roleName, inputTypeAttr, elementSizeAttr)){
             const GfVec2f rawVal = val.Get<GfVec2f>();
-            *valueAttr = VtKatanaCopy(rawVal); 
+            *valueAttr = VtKatanaCopy(rawVal);
         }
         return;
     }
@@ -613,7 +613,7 @@
         if (_KTypeAndSizeFromUsdVec3(roleName, "double",
                                      inputTypeAttr, elementSizeAttr)){
             const GfVec3d rawVal = val.Get<GfVec3d>();
-            *valueAttr = VtKatanaCopy(rawVal); 
+            *valueAttr = VtKatanaCopy(rawVal);
         }
         return;
     }
@@ -621,7 +621,7 @@
         if (_KTypeAndSizeFromUsdVec4(roleName, "double",
                                      inputTypeAttr, elementSizeAttr)){
             const GfVec4d rawVal = val.Get<GfVec4d>();
-            *valueAttr = VtKatanaCopy(rawVal); 
+            *valueAttr = VtKatanaCopy(rawVal);
         }
         return;
     }
@@ -930,12 +930,12 @@
     // off the leading rootPath and prepending rootLocation.
     //
     // absolute path: starts with '/'
-    std::string pathString = path.GetString(); 
+    std::string pathString = path.GetString();
     if (!isolatePathString.empty()) {
         if (pathString.find(isolatePathString) == 0) {
             pathString = pathString.substr(isolatePathString.size());
         } else {
-            // no good guess about the katana target location: 
+            // no good guess about the katana target location:
             //   isolatePath is not a prefix of the prim being cooked
             if (allowOutsideIsolation) {
                 // So we are returning the path using the session location
@@ -951,18 +951,18 @@
                 return std::string();
             }
         }
-    } 
+    }
 
     // The rootPath is expected to be an absolute path or empty string.
     //
     // minimum expected path is '/'
-    if (rootPathString.empty() && pathString.empty()) { 
+    if (rootPathString.empty() && pathString.empty()) {
         return "/";
     }
 
     std::string resultKatanaLocation = rootPathString;
     resultKatanaLocation += pathString;
-   
+
     return resultKatanaLocation;
 }
 
@@ -998,12 +998,12 @@
             data.GetMasterPath(), data.GetInstancePath());
     }
 
-    return ConvertUsdPathToKatLocation(nonMasterPath, data.GetUsdInArgs(), 
+    return ConvertUsdPathToKatLocation(nonMasterPath, data.GetUsdInArgs(),
                                        allowOutsideIsolation);
 }
 
 std::string
-PxrUsdKatanaUtils::_GetDisplayName(const UsdPrim &prim) 
+PxrUsdKatanaUtils::_GetDisplayName(const UsdPrim &prim)
 {
     std::string primName = prim.GetName();
     UsdUISceneGraphPrimAPI sgp(prim);
@@ -1023,7 +1023,7 @@
     else
     {
         UsdAttribute primNameAttr = UsdKatanaLookAPI(prim).GetPrimNameAttr();
-        if (primNameAttr.IsValid() && 
+        if (primNameAttr.IsValid() &&
                 !PxrUsdKatana_IsAttrValFromBaseMaterial(primNameAttr) &&
                 !PxrUsdKatana_IsAttrValFromDirectReference(primNameAttr)) {
             primNameAttr.Get(&primName);
@@ -1032,17 +1032,17 @@
     return primName;
 }
 
-std::string 
+std::string
 PxrUsdKatanaUtils::_GetDisplayGroup(
-        const UsdPrim &prim, 
-        const SdfPath& path) 
+        const UsdPrim &prim,
+        const SdfPath& path)
 {
     std::string displayGroup;
     UsdUISceneGraphPrimAPI sgp(prim);
 
     UsdAttribute displayGroupAttr = sgp.GetDisplayGroupAttr();
-    if (displayGroupAttr.IsValid() && 
-            !PxrUsdKatana_IsAttrValFromBaseMaterial(displayGroupAttr) && 
+    if (displayGroupAttr.IsValid() &&
+            !PxrUsdKatana_IsAttrValFromBaseMaterial(displayGroupAttr) &&
             !PxrUsdKatana_IsAttrValFromDirectReference(displayGroupAttr)) {
         TfToken displayGroupToken;
         if (displayGroupAttr.Get(&displayGroupToken)) {
@@ -1065,7 +1065,7 @@
             parentPath = materialSchema.GetBaseMaterialPath();
         }
 
-        UsdPrim parentPrim = 
+        UsdPrim parentPrim =
             prim.GetStage()->GetPrimAtPath(parentPath);
 
         // Asset sanity check. It is possible the derivesFrom relationship
@@ -1078,22 +1078,22 @@
         if (parentPrim.IsInMaster())
         {
             // If the prim is inside a master, then attempt to translate the
-            // parentPath to the corresponding uninstanced path, assuming that 
+            // parentPath to the corresponding uninstanced path, assuming that
             // the given forwarded path and parentPath belong to the same master
             const SdfPath primPath = prim.GetPath();
-            std::pair<SdfPath, SdfPath> prefixPair = 
+            std::pair<SdfPath, SdfPath> prefixPair =
                 primPath.RemoveCommonSuffix(path);
             const SdfPath& masterPath = prefixPair.first;
             const SdfPath& instancePath = prefixPair.second;
-            
-            // XXX: Assuming that the base look (parent) path belongs to the 
+
+            // XXX: Assuming that the base look (parent) path belongs to the
             // same master! If it belongs to a different master, we don't have
             //  the context needed to resolve it.
             if (parentPath.HasPrefix(masterPath)) {
                 parentPath = instancePath.AppendPath(parentPath.ReplacePrefix(
                     masterPath, SdfPath::ReflexiveRelativePath()));
             } else {
-                FnLogWarn("Error converting UsdMaterial path <" << 
+                FnLogWarn("Error converting UsdMaterial path <" <<
                     path.GetString() <<
                     "> to katana location: could not map parent path <" <<
                     parentPath.GetString() << "> to uninstanced location.");
@@ -1103,9 +1103,9 @@
         // displayGroup coming from the parent includes the materialGroup
         std::string parentDisplayName = _GetDisplayName(parentPrim);
         std::string parentDisplayGroup = _GetDisplayGroup(
-            parentPrim, 
+            parentPrim,
             parentPath);
-        
+
         if (parentDisplayGroup.empty()) {
             displayGroup = parentDisplayName;
         }
@@ -1123,15 +1123,15 @@
 PxrUsdKatanaUtils::ConvertUsdMaterialPathToKatLocation(
         const SdfPath& path,
         const PxrUsdKatanaUsdInPrivateData& data)
-{    
+{
     std::string returnValue = "/" + path.GetName();
 
     // calculate the material group. It can be either "/" or an absolute
     // path (no trailing '/')
-    std::string materialGroupKatanaPath = 
+    std::string materialGroupKatanaPath =
         ConvertUsdPathToKatLocation(path.GetParentPath(), data, true);
 
-    UsdPrim prim = 
+    UsdPrim prim =
         UsdUtilsGetPrimAtPathWithForwarding(
             data.GetUsdInArgs()->GetStage(), path);
 
@@ -1148,7 +1148,7 @@
     }
     else {
         // the parent of this material is a material group
-        // apply prim name only if 
+        // apply prim name only if
         returnValue = materialGroupKatanaPath;
         if (returnValue != "/") {
             returnValue += '/';
@@ -1176,7 +1176,7 @@
     return returnValue;
 }
 
-bool 
+bool
 PxrUsdKatanaUtils::ModelGroupIsAssembly(const UsdPrim &prim)
 {
     if (!(prim.IsGroup() && prim.GetParent()) || prim.IsInMaster())
@@ -1191,7 +1191,7 @@
         return false;
     }
 
-    return KindRegistry::IsA(kind, KindTokens->assembly) 
+    return KindRegistry::IsA(kind, KindTokens->assembly)
         || PxrUsdKatanaUtils::ModelGroupNeedsProxy(prim);
 }
 
@@ -1213,21 +1213,21 @@
     proxiesBuilder.set("viewer.load.opArgs.a.type",
         FnKat::StringAttribute("usd"));
 
-    proxiesBuilder.set("viewer.load.opArgs.a.currentTime", 
+    proxiesBuilder.set("viewer.load.opArgs.a.currentTime",
         FnKat::DoubleAttribute(currentTime));
 
-    proxiesBuilder.set("viewer.load.opArgs.a.fileName", 
+    proxiesBuilder.set("viewer.load.opArgs.a.fileName",
         FnKat::StringAttribute(fileName));
 
-    proxiesBuilder.set("viewer.load.opArgs.a.forcePopulateUsdStage", 
+    proxiesBuilder.set("viewer.load.opArgs.a.forcePopulateUsdStage",
         FnKat::FloatAttribute(1));
 
     // XXX: Once everyone has switched to the op, change referencePath
     // to isolatePath here and in the USD VMP (2/25/2016).
-    proxiesBuilder.set("viewer.load.opArgs.a.referencePath", 
+    proxiesBuilder.set("viewer.load.opArgs.a.referencePath",
         FnKat::StringAttribute(referencePath));
 
-    proxiesBuilder.set("viewer.load.opArgs.a.rootLocation", 
+    proxiesBuilder.set("viewer.load.opArgs.a.rootLocation",
         FnKat::StringAttribute(rootLocation));
 
     proxiesBuilder.set("viewer.load.opArgs.a.session", sessionAttr);
@@ -1250,7 +1250,7 @@
             data.GetUsdInArgs()->GetIgnoreLayerRegex());
 }
 
-bool 
+bool
 PxrUsdKatanaUtils::PrimIsSubcomponent(const UsdPrim &prim)
 {
     // trying to make this early exit for leaf geometry.
@@ -1264,8 +1264,8 @@
     TfToken kind;
 
     if (!UsdModelAPI(prim).GetKind(&kind)){
-        TF_WARN("Expected to find authored kind on prim <%s>",
-                prim.GetPath().GetText());
+        // TF_WARN("Expected to find authored kind on prim <%s>",
+        //         prim.GetPath().GetText());
         return false;
     }
 
@@ -1274,7 +1274,7 @@
 
 
 
-bool 
+bool
 PxrUsdKatanaUtils::ModelGroupNeedsProxy(const UsdPrim &prim)
 {
     // No proxy if group-to-assembly promotion is explicitly suppressed.
@@ -1289,13 +1289,13 @@
     // this an assembly as a load/proxy optimization.
     TF_FOR_ALL(childIt, prim.GetChildren()) {
         if (childIt->IsGroup())
-            return false; 
+            return false;
     }
 
     return true;
 }
 
-bool 
+bool
 PxrUsdKatanaUtils::IsModelAssemblyOrComponent(const UsdPrim& prim)
 {
     if (!prim.IsModel() || prim.IsInMaster()) {
@@ -1335,7 +1335,7 @@
 
 bool
 PxrUsdKatanaUtils::IsAttributeVarying(
-    const UsdAttribute& attr, double currentTime) 
+    const UsdAttribute& attr, double currentTime)
 {
     // XXX: Copied from UsdImagingDelegate::_TrackVariability.
     // XXX: This logic is highly sensitive to the underlying quantization of
@@ -1410,7 +1410,7 @@
     return PxrUsdKatanaUtils::GetModelInstanceName( prim.GetParent() );
 }
 
-std::string 
+std::string
 PxrUsdKatanaUtils::GetAssetName(const UsdPrim& prim)
 {
     bool isPseudoRoot = prim.GetPath() == SdfPath::AbsoluteRootPath();
@@ -1467,7 +1467,7 @@
         // Don't return empty bboxes, Katana/PRMan will not behave well.
         if (range.IsEmpty()) {
             // FnLogWarn(TfStringPrintf(
-            //     "Failed to compute bound for <%s>", 
+            //     "Failed to compute bound for <%s>",
             //      prim.GetPath().GetText()));
             return FnKat::DoubleAttribute();
         }
@@ -1497,18 +1497,18 @@
     typedef std::map<std::string, std::string> StringMap;
     typedef std::set<std::string> StringSet;
     typedef std::map<std::string, StringSet> StringSetMap;
-    
+
     void _walkForMasters(const UsdPrim& prim, StringMap & masterToKey,
             StringSetMap & keyToMasters)
     {
         if (prim.IsInstance())
         {
             const UsdPrim master = prim.GetMaster();
-            
+
             if (master.IsValid())
             {
                 std::string masterPath = master.GetPath().GetString();
-                
+
                 if (masterToKey.find(masterPath) == masterToKey.end())
                 {
                     std::string assetName;
@@ -1517,12 +1517,12 @@
                     {
                         assetName = "master";
                     }
-                    
+
                     std::ostringstream buffer;
                     buffer << assetName << "/variants";
-                    
+
                     UsdVariantSets variantSets = prim.GetVariantSets();
-                    
+
                     std::vector<std::string> names;
                     variantSets.GetNames(&names);
                     TF_FOR_ALL(I, names)
@@ -1533,19 +1533,19 @@
                                         variantName).GetVariantSelection();
                         buffer << "__" << variantName << "_" << variantValue;
                     }
-                    
+
                     std::string key = buffer.str();
                     masterToKey[masterPath] = key;
                     keyToMasters[key].insert(masterPath);
                     //TODO, Warn when there are multiple masters with the
                     //      same key.
-                    
+
                     _walkForMasters(master, masterToKey, keyToMasters);
                 }
             }
         }
-        
-        
+
+
         TF_FOR_ALL(childIter, prim.GetFilteredChildren(
                 UsdPrimIsDefined && UsdPrimIsActive && !UsdPrimIsAbstract))
         {
@@ -1562,30 +1562,30 @@
     StringMap masterToKey;
     StringSetMap keyToMasters;
     _walkForMasters(stage->GetPrimAtPath(rootPath), masterToKey, keyToMasters);
-    
+
     FnKat::GroupBuilder gb;
     TF_FOR_ALL(I, keyToMasters)
     {
         const std::string & key = (*I).first;
         const StringSet & masters = (*I).second;
-        
+
         size_t i = 0;
-        
+
         TF_FOR_ALL(J, masters)
         {
             const std::string & master = (*J);
-            
+
             std::ostringstream buffer;
-            
+
             buffer << key << "/m" << i;
             gb.set(FnKat::DelimiterEncode(master),
                     FnKat::StringAttribute(buffer.str()));
-            
+
             ++i;
         }
     }
-    
-    
+
+
     return gb.build();
 }
 
@@ -1804,4 +1804,3 @@
 }
 
 PXR_NAMESPACE_CLOSE_SCOPE
-
